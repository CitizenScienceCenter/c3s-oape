{
  "openapi": "3.0.0",
  "info": {
    "title": "CCCS",
    "version": "0.1"
  },
  "servers": [
    {
      "url": "{scheme}://{environment}{port}/{basePath}",
      "variables": {
        "scheme": {
          "default": "http",
          "enum": [
            "http",
            "https"
          ]
        },
        "environment": {
          "default": "api",
          "enum": [
            "api",
            "api.dev",
            "api.staging"
          ]
        },
        "port": {
          "default": ":8080",
          "enum": [
            ":8080"
          ]
        },
        "basePath": {
          "default": "/api/v1",
          "enum": [
            "/api/v1"
          ]
        }
      }
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "oauth2": [

            ]
          }
        ],
        "x-swagger-router-controller": "api.user",
        "operationId": "get_users",
        "parameters": [
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Users"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/authorize": {
      "post": {
        "tags": [
          "Users"
        ],
        "x-swagger-router-controller": "api.otoken",
        "operationId": "generate",
        "summary": "Post auth for token response",
        "responses": {
          "200": {
            "description": "Token created"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Otoken"
              }
            }
          }
        }
      }
    },
    "/users/validate": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "OAuth2 token info",
        "x-swagger-router-controller": "api.user",
        "operationId": "validate",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token info object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Registration end point for a user account",
        "x-swagger-router-controller": "api.user",
        "operationId": "register_user",
        "responses": {
          "200": {
            "description": "Created user"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        }
      }
    },
    "/users/reset": {
      "get": {
        "tags": [
          "Users"
        ],
        "x-swagger-router-controller": "api.user",
        "operationId": "reset",
        "summary": "Reset user password",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "x-swagger-router-controller": "api.user",
        "operationId": "verify_reset",
        "summary": "Verify password reset token",
        "responses": {
          "200": {
            "description": "Verified and reset"
          },
          "401": {
            "description": "Unauthorised user"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "pwd",
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "token": {
                    "type": "string"
                  },
                  "pwd": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "x-swagger-router-controller": "api.user",
        "operationId": "login",
        "summary": "Allow a user to login",
        "responses": {
          "200": {
            "description": "Login successful"
          },
          "401": {
            "description": "Incorrect login details"
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          },
          "required": true
        }
      }
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Users"
        ],
        "x-swagger-router-controller": "api.user",
        "operationId": "get_user",
        "summary": "Get all users (or those matching an ID)",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Return users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Users"
        ],
        "x-swagger-router-controller": "api.user",
        "operationId": "update_user",
        "summary": "Update user details (change password, add details etc)",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/User"
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "x-swagger-router-controller": "api.project",
        "operationId": "get_projects",
        "summary": "Get all projects",
        "parameters": [
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-swagger-router-controller": "api.project",
        "operationId": "create_project",
        "summary": "Post a project",
        "responses": {
          "201": {
            "description": "New project created"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Project"
        }
      }
    },
    "/projects/{id}": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-swagger-router-controller": "api.project",
        "operationId": "get_project",
        "summary": "Get a single project",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Return project"
          },
          "404": {
            "description": "Project does not exist"
          }
        }
      },
      "put": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-swagger-router-controller": "api.project",
        "operationId": "put_project",
        "summary": "Modify/Create a project",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Project modified"
          },
          "201": {
            "description": "New project created"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Project"
        }
      },
      "delete": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Projects"
        ],
        "x-swagger-router-controller": "api.project",
        "operationId": "delete_project",
        "summary": "Remove a project",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Project was deleted"
          },
          "404": {
            "description": "Project does not exist"
          }
        }
      }
    },
    "/projects/{id}/stats": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "x-swagger-router-controller": "api.project",
        "operationId": "get_stats",
        "responses": {
          "200": {
            "description": "Project stats"
          },
          "404": {
            "description": "Project does not exist"
          }
        }
      }
    },
    "/projects/{id}/tasks": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "string",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            }
          }
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "project_tasks",
        "responses": {
          "200": {
            "description": "Project tasks"
          },
          "404": {
            "description": "Project does not exist"
          }
        }
      }
    },
    "/projects/{id}/tasks/random": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "get_random",
        "responses": {
          "200": {
            "description": "A single random project task"
          },
          "404": {
            "description": "Project does not exist or task not found"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Tasks"
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "get_tasks",
        "summary": "Get a list of tasks",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "string",
              "default": 0
            }
          },
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Tasks"
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "create_tasks",
        "summary": "Post an array of tasks",
        "responses": {
          "200": {
            "description": "Task created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Tasks"
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "delete_tasks",
        "summary": "Delete an array of tasks",
        "responses": {
          "204": {
            "description": "Tasks were deleted"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Tasks"
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "get_task",
        "summary": "Get a single task",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Return task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task does not exist"
          }
        }
      },
      "put": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Tasks"
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "put_task",
        "summary": "Modify/Create a task",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Task modified"
          },
          "201": {
            "description": "New task created"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Task"
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Tasks"
        ],
        "x-swagger-router-controller": "api.task",
        "operationId": "delete_task",
        "summary": "Delete a single tasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Task was deleted"
          }
        }
      }
    },
    "/submissions": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Submissions"
        ],
        "x-swagger-router-controller": "api.submission",
        "operationId": "get_submissions",
        "summary": "Get a single submission",
        "parameters": [
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Submission"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Submissions"
        ],
        "x-swagger-router-controller": "api.submission",
        "operationId": "create_submission",
        "summary": "Post a submission",
        "responses": {
          "200": {
            "description": "Submission created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission"
                }
              }
            }
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Submission"
        }
      },
      "put": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Submissions"
        ],
        "x-swagger-router-controller": "api.submission",
        "operationId": "put_submission",
        "summary": "Modify/Create a submission",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Submission modified"
          },
          "201": {
            "description": "New submission created"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Submission"
        }
      },
      "delete": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Submissions"
        ],
        "x-swagger-router-controller": "api.submission",
        "operationId": "delete_submission",
        "summary": "Remove a submission",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Submission was deleted"
          },
          "404": {
            "description": "Submission does not exist"
          }
        }
      }
    },
    "/submission/{id}": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Submissions"
        ],
        "x-swagger-router-controller": "api.submission",
        "operationId": "get_submission",
        "summary": "Get a single submission",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Return submission",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Submission"
                }
              }
            }
          },
          "404": {
            "description": "Submission does not exist"
          }
        }
      }
    },
    "/media": {
      "post": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Media"
        ],
        "description": "The media details (for files already on the server or remotely hosted)",
        "x-swagger-router-controller": "api.media",
        "operationId": "create_media",
        "responses": {
          "200": {
            "description": "Media attached"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Media"
        }
      },
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Media"
        ],
        "description": "Get a list of media",
        "x-swagger-router-controller": "api.media",
        "operationId": "get_media",
        "parameters": [
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of media",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Media"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/media/upload": {
      "post": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Media"
        ],
        "description": "Add a new media attachment",
        "x-swagger-router-controller": "api.media",
        "operationId": "upload",
        "responses": {
          "200": {
            "description": "Media attached"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachment": {
                    "description": "The file to be uploaded",
                    "type": "string",
                    "format": "binary"
                  },
                  "id": {
                    "type": "string"
                  }
                },
                "required": [
                  "attachment"
                ]
              }
            }
          }
        }
      }
    },
    "/media/{id}": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Media"
        ],
        "x-swagger-router-controller": "api.media",
        "operationId": "get_medium",
        "summary": "Get a single file",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Return Media",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Media does not exist"
          }
        }
      },
      "put": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Media"
        ],
        "x-swagger-router-controller": "api.media",
        "operationId": "put_medium",
        "summary": "Put a single file",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "Return Media",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Media"
                }
              }
            }
          },
          "404": {
            "description": "Media does not exist"
          }
        },
        "requestBody": {
          "$ref": "#/components/requestBodies/Media"
        }
      }
    },
    "/media/source/{id}": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Media"
        ],
        "x-swagger-router-controller": "api.media",
        "operationId": "get_for_source",
        "summary": "Query media for a specific task or project",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Return Media",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Media"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Media does not exist"
          }
        }
      },
      "delete": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Media"
        ],
        "x-swagger-router-controller": "api.media",
        "operationId": "delete_medium",
        "summary": "Delete a single Media file",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Media deleted"
          },
          "404": {
            "description": "Media does not exist"
          }
        }
      }
    },
    "/groups": {
      "post": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Add a new group",
        "x-swagger-router-controller": "api.group",
        "operationId": "create",
        "responses": {
          "200": {
            "description": "Group Created"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Groups"
              }
            }
          },
          "required": true
        }
      },
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "description": "Get a list of group",
        "x-swagger-router-controller": "api.group",
        "operationId": "get_groups",
        "parameters": [
          {
            "name": "search_term",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Groups"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          },
          {
            "anonUser": [

            ]
          }
        ],
        "tags": [
          "Orgs"
        ],
        "x-swagger-router-controller": "api.group",
        "operationId": "get_group",
        "summary": "Get a single group",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Return Organisation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            }
          },
          "404": {
            "description": "Group does not exist"
          }
        }
      },
      "put": {
        "security": [
          {
            "apiKeyHeader": [

            ]
          }
        ],
        "tags": [
          "Orgs"
        ],
        "x-swagger-router-controller": "api.group",
        "operationId": "put_group",
        "summary": "Modify a group",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "Return Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            }
          },
          "404": {
            "description": "Group does not exist"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Groups"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "id": {
        "name": "id",
        "description": "The unique identifer for an Object (i.e. User, Task, Project, Submission etc)",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9-]+$"
        }
      }
    },
    "requestBodies": {
      "Submission": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Submission"
            }
          }
        }
      },
      "User": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Users"
            }
          }
        }
      },
      "Project": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Project"
            }
          }
        }
      },
      "Media": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Media"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      },
      "anonUser": {
        "type": "apiKey",
        "in": "header",
        "name": "X-ANON"
      },
      "oauth2": {
        "type": "oauth2",
        "x-tokenInfoUrl": "http://localhost:8081/api/v1/users/validate",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://localhost:8081/oauth/authorize",
            "scopes": {
              "apiKey": "Unique identifier of the user accessing the service."
            }
          }
        }
      }
    },
    "schemas": {
      "Users": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "pwd": {
            "type": "string"
          },
          "api_key": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          }
        }
      },
      "Media": {
        "type": "object",
        "required": [
          "source_id",
          "path",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 20,
            "readOnly": true
          },
          "source_id": {
            "type": "string",
            "description": "The task or project or user it is related to"
          },
          "path": {
            "type": "string",
            "description": "Local or remote path"
          },
          "name": {
            "type": "string",
            "description": "Name of file"
          },
          "filetype": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          }
        }
      },
      "Otoken": {
        "type": "object",
        "required": [
          "user_id",
          "project_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "user_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          }
        }
      },
      "Project": {
        "type": "object",
        "required": [
          "name",
          "description",
          "platform"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique project ID"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "platform": {
            "type": "string",
            "enum": [
              "Desktop",
              "Mobile",
              "Both"
            ]
          },
          "owned_by": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          }
        }
      },
      "Task": {
        "type": "object",
        "required": [
          "project_id",
          "sequence",
          "title",
          "content",
          "required"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique task ID"
          },
          "project_id": {
            "type": "string"
          },
          "sequence": {
            "type": "integer"
          },
          "content": {
            "type": "object"
          },
          "title": {
            "type": "string"
          },
          "required": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time",
            "example": "2015-07-07T15:49:51.230+02:00",
            "readOnly": true
          }
        }
      },
      "Groups": {
        "type": "object",
        "required": [
          "name",
          "description",
          "created_by"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "api_key": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Submission": {
        "type": "object",
        "required": [
          "task_id",
          "user_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "task_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "content": {
            "type": "object"
          }
        }
      }
    }
  }
}